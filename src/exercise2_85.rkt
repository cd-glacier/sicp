#lang racket

;;;get put;;;
(define global-array '())

(define (make-entry k v) (list k v))
(define (key entry) (car entry))
(define (value entry) (cadr entry))

(define (put-table table key1 key2 item)
	(if (not (hash-has-key? table key1))
		(hash-set! table key1 (make-hash))
		true)
	(hash-set! (hash-ref table key1) key2 item))

(define (get-table table key1 key2)
	(define (not-found . msg)
		;  (display msg (current-error-port))
		;  (display "\n")
		false)
	(if (hash-has-key? table key1)
		(if (hash-has-key? (hash-ref table key1) key2)
			(hash-ref (hash-ref table key1) key2)
			(not-found "Bad key -- KEY2" key2))
		(not-found "Bad key -- KEY1" key1)))

(define *op-table* (make-hash))
(define (put op type item)
	(put-table *op-table* op type item))
(define (get op type)
	(get-table *op-table* op type))

(define *coercion-table* (make-hash))
(define (put-coercion type1 type2 item)
	(put-table *coercion-table* type1 type2 item))
(define (get-coercion type1 type2)
	(get-table *coercion-table* type1 type2))

;;;tag;;;
(define (attach-tag type-tag contents)
	(cons type-tag contents))
(define (type-tag datum)
	(cond ((pair? datum) (car datum))
				((number? datum) 'scheme-number)
				(else (error "Bad tagged datum: TYPE-TAG" datum))))
(define (contents datum)
	(cond ((pair? datum) (cdr datum))
				((number? datum) datum)
				(else (error "Bad tagged datum: CONTENTS" datum))))

;;;generic;;;
(define (apply-generic op . args)
	(let ((type-tags (map type-tag args)))
		(let ((proc (get op type-tags))) 
			(if proc
				(apply proc (map contents args))
				(if (= (length args) 2)
					(let ((type1 (car type-tags)) 
								(type2 (cadr type-tags))
								(a1 (car args))
								(a2 (cadr args)))
						(cond ((eq? type1 (higher type1 type2)) 
									 (apply-generic op a1 (raise a2)))
									((eq? type2 (higher type1 type2))
									 (apply-generic op (raise a1) a2))
									(else (error "No method for these types" (list op type-tags)))))
					(error "No method for these types" (list op type-tags)))))))

;;;content;;;
(define (install-scheme-number-package)
	(define (tag x) (attach-tag 'scheme-number x))
	(put 'add '(scheme-number scheme-number)
			 (lambda (x y) (tag (+ x y))))
	(put 'sub '(scheme-number scheme-number)
			 (lambda (x y) (tag (- x y))))
	(put 'mul '(scheme-number scheme-number)
			 (lambda (x y) (tag (* x y))))
	(put 'div '(scheme-number scheme-number)
			 (lambda (x y) (tag (/ x y))))
	(put 'make 'scheme-number (lambda (x) (tag x)))
	(put '=zero? '(scheme-number) (lambda (x) (= x 0)))
	(put 'exp '(scheme-number scheme-number)
			 (lambda (x y) (tag (expt x y))))
	'done)

(define (install-integer-package)
	(define (tag x) (attach-tag 'integer x))
	(define (make x) (tag (exact-floor x)))
	(put 'add '(integer integer)
			 (lambda (x y) (make (+ x y))))
	(put 'sub '(integer integer)
			 (lambda (x y) (make (- x y))))
	(put 'mul '(integer integer)
			 (lambda (x y) (make (* x y))))
	(put 'div '(integer integer)
			 (lambda (x y) (make (/ x y))))
	(put 'make 'integer make)
	(put 'equ? 'integer (lambda (x y) (= x y)))
	(put '=zero? '(integer) (lambda (x) (= x 0)))
	(put 'raise '(integer) (lambda (x) ((get 'make 'rational) x 1)))
	'done)

(define (install-real-package)
	(define (tag x) (attach-tag 'real x))
	;;;;;;;;;;;;;;;;;;;
	(define (decimal-place x)
		(define (iter x result)
			(if (= (quotient x 10) 0)
				result
				(iter (quotient x 10) (+ result 1))))
		(iter x 0))
	(define (project x)
		((get 'make 'rational) x
													 (expt 10 (decimal-place x))))

	(put 'add '(real real)
			 (lambda (x y) (tag (+ x y))))
	(put 'sub '(real real)
			 (lambda (x y) (tag (- x y))))
	(put 'mul '(real real)
			 (lambda (x y) (tag (* x y))))
	(put 'div '(real real)
			 (lambda (x y) (tag (/ x y))))
	(put 'make 'real (lambda (x) (tag (* 1.0 x))))
	(put 'equ? 'real (lambda (x y) (= x y)))
	(put '=zero? '(real) (lambda (x) (= x 0)))
	(put 'raise '(real)
			 (lambda (x) ((get 'make-from-real-imag 'complex) x 0)))
	(put 'project '(real) project)
	'done)

(define (install-rational-package)
	(define (numer x) (car x))
	(define (denom x) (cdr x))
	(define (make-rat n d)
		(let ((g (gcd n d)))
			(cons (/ n g) (/ d g))))
	(define (add-rat x y)
		(make-rat (+ (* numer x) (denom y)
								 (* (numer y) (denom x)))
							(* (denom x) (denom y))))
	(define (sub-rat x y)
		(make-rat (- (* (numer x) (denom y))
								 (* (numer y) (denom x)))
							(* (denom x) (denom y))))
	(define (mul-rat x y)
		(make-rat (* (numer x) (numer y))
							(* (denom x) (denom y))))
	(define (div-rat x y)
		(make-rat (* (numer x) (denom y))
							(* (denom x) (numer y))))
	(define (equ? x y)
		(and (= (numer x) (numer y))
				 (= (denom x) (denom y))))
	(define (=zero? x)
		(= (numer x) 0))
	(define (raise x)
		((get 'make 'real) (/ (numer x)
													(denom x))))
	(define (project x)
		((get 'make 'integer) (/ (numer x)
														 (denom x))))

	(define (tag x) (attach-tag 'rational x))
	(put 'nuber '(rational) numer)
	(put 'denom '(rational) denom)
	(put 'add '(rational rational)
			 (lambda (x y) (tag (add-rat x y))))
	(put 'sub '(rational rational)
			 (lambda (x y) (tag (sub-rat x y))))
	(put 'mul '(rational rational)
			 (lambda (x y) (tag (mul-rat x y))))
	(put 'div '(rational rational)
			 (lambda (x y) (tag (div-rat x y))))
	(put 'make 'rational
			 (lambda (n d) (tag (make-rat n d))))
	(put 'equ? '(rational rational) equ?)
	(put '=zero? '(rational)
			 (lambda (x) (=zero? x)))
	(put 'raise '(rational) raise)
	(put 'project '(rational) project)
	'done)

(define (install-rectangular-package)
	; internal procedures
	(define (real-part z) (car z))
	(define (imag-part z) (cdr z))
	(define (make-from-real-imag x y) (cons x y))
	(define (square x) (* x x))
	(define (magnitude z)
		(sqrt (+ (square (real-part z))
						 (square (imag-part z)))))
	(define (angle z)
		(atan (imag-part z) (real-part z)))
	(define (make-from-mag-ang r a)
		(cons (* r (cos a)) (* r (sin a))))
	(define (=zero? z)
		(and (= (real-part z) 0)
				 (= (imag-part z) 0)))

	; interface to the rest of the system
	(define (tag x) (attach-tag 'rectangular x))
	(put 'real-part '(rectangular) real-part) 
	(put 'imag-part '(rectangular) imag-part)
	(put 'magnitude '(rectangular) magnitude)
	(put 'angle '(rectangular) angle)
	(put 'make-from-real-imag 'rectangular
			 (lambda (x y) (tag (make-from-real-imag x y))))
	(put 'make-from-mag-ang 'rectangular
			 (lambda (r a) (tag (make-from-mag-ang r a))))
	(put '=zero? '(rectagular) (lambda (z) (=zero? z)))
	'done)

(define (install-polar-package)
	;; internal procedures
	(define (magnitude z) (car z))
	(define (angle z) (cdr z))
	(define (make-from-mag-ang r a) (cons r a)) 
	(define (real-part z)
		(* (magnitude z) (cos (angle z)))) 
	(define (imag-part z)
		(* (magnitude z) (sin (angle z)))) 
	(define (square x) (* x x))
	(define (make-from-real-imag x y)
		(cons (sqrt (+ (square x) (square y)))
					(atan y x)))
	(define (=zero? z)
		(= 0 (magnitude z)))

	;; interface to the rest of the system
	(define (tag x) (attach-tag 'polar x))
	(put 'real-part '(polar) real-part)
	(put 'imag-part '(polar) imag-part)
	(put 'magnitude '(polar) magnitude)
	(put 'angle '(polar) angle)
	(put 'make-from-real-imag 'polar
			 (lambda (x y) (tag (make-from-real-imag x y))))
	(put 'make-from-mag-ang 'polar
			 (lambda (r a) (tag (make-from-mag-ang r a))))
	(put '=zero? '(polar) (lambda (z) (=zero? z)))
	'done)

(define (install-complex-package)
	(define (make-from-real-imag x y)
		((get 'make-from-real-imag 'rectangular) x y))	
	(define (make-from-mag-ang r a)
		((get 'make-from-mag-ang 'polar) r a))
	(define (real-part z) (apply-generic 'real-part z))
	(define (imag-part z) (apply-generic 'imag-part z))
	(define (magnitude z) (apply-generic 'magnitude z))
	(define (angle z) (apply-generic 'angle z))
	(define (=zero? z) (apply-generic '=zero? z))
	(define (project z) ((get 'make 'real) (real-part z)))

	(define (add-complex z1 z2)
		(make-from-real-imag (+ (real-part z1) (real-part z2))
												 (+ (imag-part z1) (imag-part z2))))
	(define (sub-complex z1 z2)
		(make-from-real-imag (- (real-part z1) (real-part z2))
												 (- (imag-part z1) (imag-part z2))))
	(define (mul-complex z1 z2)
		(make-from-real-imag (* (magnitude z1) (magnitude z2))
												 (+ (angle z1) (angle z2))))
	(define (div-complex z1 z2)
		(make-from-real-imag (/ (magnitude z1) (magnitude z2))
												 (- (angle z1) (angle z2))))

	(define (tag z) (attach-tag 'complex z))
	(put 'add '(complex complex)
			 (lambda (z1 z2) (tag (add-complex z1 z2))))
	(put 'sub '(complex complex)
			 (lambda (z1 z2) (tag (sub-complex z1 z2))))
	(put 'mul '(complex complex)
			 (lambda (z1 z2) (tag (mul-complex z1 z2))))
	(put 'div '(complex complex)
			 (lambda (z1 z2) (tag (div-complex z1 z2))))
	(put 'make-from-real-imag 'complex
			 (lambda (x y) (tag (make-from-real-imag x y))))
	(put 'make-from-mag-ang 'complex
			 (lambda (r a) (tag (make-from-mag-ang r a))))
	(put 'real-part '(complex) real-part)
	(put 'imag-part '(complex) imag-part)
	(put 'magnitude '(complex) magnitude)
	(put 'angle '(complex) angle)
	(put 'equ? '(complex complex)
			 (lambda (x y) (and (= (real-part x) (real-part y))
													(= (imag-part x) (imag-part y)))))
	(put '=zero? '(complex) =zero?)
	(put 'project '(complex) project)
	'done)

;;;body;;;
(install-scheme-number-package)
(install-integer-package)
(install-real-package)
(install-rational-package)
(install-polar-package)
(install-rectangular-package)
(install-complex-package)

(define (make-scheme-number n)
	((get 'make 'scheme-number) n))
(define (make-integer i)
	((get 'make 'integer) i))
(define (make-real r)
	((get 'make 'real) r))
(define (make-rational n d)
	((get 'make 'rational) n d))
(define (make-complex-from-real-imag x y)
	((get 'make-from-real-imag 'complex) x y))
(define (make-complex-from-mag-ang r a)
	((get 'make-from-mag-ang 'complex) r a))

(define (add x y) (apply-generic 'add x y))
(define (sub x y) (apply-generic 'sub x y))
(define (mul x y) (apply-generic 'mul x y))
(define (div x y) (apply-generic 'div x y))
(define (numer r) (apply-generic 'numer r))
(define (denom r) (apply-generic 'denom r))
(define (real-part z) (apply-generic 'real-part z))
(define (imag-part z) (apply-generic 'imag-part z))
(define (equ? x y) (apply-generic 'equ? x y))
(define (=zero? x) (apply-generic '=zero? x))
(define (raise x) ((get 'raise (list (type-tag x))) x))
(define (project x) (apply-generic 'project x))
(define (drop x)
	(if (eq? 'integer (type-tag x))
		x
		(let ((p (project x)))
			(if (equ? x (raise p))
				(drop p)
				p))))

(define type-tower
	'(complex real rational integer))

(define (higher t1 t2)
	(define (iter t1 t2 type-tower)
		(cond ((eq? t1 t2) t1)
					((eq? t1 (car type-tower)) t1)
					((eq? t2 (car type-tower)) t2)
					(else (iter t1 t2 (cdr type-tower)))))
	(iter t1 t2 type-tower))

(define c (make-complex-from-real-imag 3 0))
(define r (make-real 7.0))
(define q (make-rational 2 1))
(define z (make-integer 3))

(drop c)

