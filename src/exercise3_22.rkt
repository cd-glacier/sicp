#lang planet neil/sicp

(define (make-queue)
	(let* ((front-ptr '())
				 (rear-ptr '())
				 (queue (cons front-ptr rear-ptr)))
		(define (front-ptr queue) (car queue))
		(define (rear-ptr queue) (cdr queue))
		(define (set-front-ptr! queue item)
			(set-car! queue item))
		(define (set-rear-ptr! queue item)
			(set-cdr! queue item))
		(define (empty-queue? queue)
			(null? (front-ptr queue)))
		(define (front-queue queue)
			(if (empty-queue? queue)
				(error "FRONT called with an empty queue" queue)
				(car (front-ptr queue))))
		(define (insert-queue! queue item)
			(let ((new-pair (cons item '())))
				(cond ((empty-queue? queue)
							 (set-front-ptr! queue new-pair)
							 (set-rear-ptr! queue new-pair)
							 queue)
							(else 
								(set-cdr! (rear-ptr queue) new-pair)
								(set-rear-ptr! queue new-pair)
								queue))))
		(define (delete-queue! queue)
			(cond ((empty-queue? queue)
						 (error "DELETE called with an empty queue" queue))
						(else (set-front-ptr! queue (cdr (front-ptr queue)))
									queue)))
		(define (print-queue queue)
			(define (iter queue)
				(cond ((empty-queue? queue) (display ""))
							((eq? (front-ptr queue) (rear-ptr queue))
							 (display (front-queue queue)))
							(else (begin (display (front-queue queue)) 
													 (display " ")
													 (delete-queue! queue)
													 (iter queue)))))
			(display "(")
			(iter queue)
			(display ")")
			(display "\n"))

		(define (dispatch m)
			(cond ((eq? m 'front-queue) front-queue)
						((eq? m 'front-ptr) front-ptr)
						((eq? m 'rear-ptr) rear-ptr)
						((eq? m 'set-front-ptr!) set-front-ptr!)
						((eq? m 'set-rear-ptr!) set-rear-ptr!)
						((eq? m 'empty-queue?) empty-queue?)
						((eq? m 'insert-queue!) insert-queue!)
						((eq? m 'delete-queue!) delete-queue!)
						((eq? m 'print-queue) print-queue)
						(else (error "no method" m))))
		dispatch))

(define q1 (make-queue))
(q1 'print-queue)
