#lang planet neil/sicp

(define (make-queue)
	(let* ((front-ptr '())
				 (rear-ptr '())
				 (queue (cons front-ptr rear-ptr)))
		(define (front-ptr) (car queue))
		(define (rear-ptr) (cdr queue))
		(define (set-front-ptr! item)
			(set-car! queue item))
		(define (set-rear-ptr! item)
			(set-cdr! queue item))
		(define (empty-queue?)
			(null? (front-ptr)))
		(define (front-queue)
			(if (empty-queue? queue)
				(error "FRONT called with an empty queue" queue)
				(car (front-ptr))))
		(define (insert-queue! item)
			(let ((new-pair (cons item '())))
				(cond ((empty-queue?)
							 (set-front-ptr! new-pair)
							 (set-rear-ptr! new-pair)
							 queue)
							(else 
								(set-cdr! (rear-ptr) new-pair)
								(set-rear-ptr! new-pair)
								queue))))
		(define (delete-queue!)
			(cond ((empty-queue?)
						 (error "DELETE called with an empty queue" queue))
						(else (set-front-ptr! (cdr (front-ptr)))
									queue)))

		(define (dispatch m)
			(cond ((eq? m 'front-queue) front-queue)
						((eq? m 'front-ptr) front-ptr)
						((eq? m 'rear-ptr) rear-ptr)
						((eq? m 'set-front-ptr!) set-front-ptr!)
						((eq? m 'set-rear-ptr!) set-rear-ptr!)
						((eq? m 'empty-queue?) empty-queue?)
						((eq? m 'insert-queue!) insert-queue!)
						((eq? m 'delete-queue!) delete-queue!)
						(else (error "no method" m))))
		dispatch))

(define q1 (make-queue))
(define (insert-queue! item)
	((q1 'insert-queue!) item))
(insert-queue! 'a)



