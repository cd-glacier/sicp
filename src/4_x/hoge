
(define (get-first-variable frame)
  (caar-handler frame "GET_FIRST_VARIABLE"))

(define (get-rest-variables frame)
  (cdar-handler frame "GET_REST_VARIABLES"))

(define (get-first-value frame)
  (caadr-handler frame "GET_FIRST_VALUE"))

(define (get-rest-values frame)
  (cdadr-handler frame "GET_REST_VALUES"))

(define (get-rest-frame-variables-values frame)
  (make-frame (get-rest-variables frame)
              (get-rest-values frame)))

(define (set-value! frame value)
  (set-car!-handler (frame-values frame) value "SET_VALUE!"))

(define (lookup-variable-value var env)
  (define (env-loop env)
    (define (scan frame)
      (cond ((null? (frame-variables frame))
             (env-loop (enclosing-environment env)))
            ((eq? var (get-first-variable frame)) (get-first-value frame))
            (else (scan (get-rest-frame-variables-values frame)))))
    (if (eq? env the-empty-environment)
      (error "Unbound variables" var)
      (let ((frame (first-frame env)))
        (scan frame))))
  (env-loop env))

(define (set-variable-value! var val env)
  (define (env-loop env)
    (define (scan frame)
      (cond ((null? (frame-variables frame))
             (env-loop (enclosing-environment env)))
            ((eq? var (get-first-variable frame)) (set-value! frame val))
            (else (scan (get-rest-frame-variables-values frame)))))
    (if (eq? env the-empty-environment)
      (error "Unbound variables: SET!" var)
      (let ((frame (first-frame env)))
        (scan frame))))
  (env-loop env))

(define (define-variable! var val env)
  (let ((frame (first-frame env)))
    (define (scan frame)
      (cond ((null? (frame-variables frame))
             (add-binding-to-frame! var val frame))
            ((eq? var (get-first-variable frame))
             (set-value! frame val))
            (else (scan (get-rest-frame-variables-values frame)))))
    (scan frame)))

