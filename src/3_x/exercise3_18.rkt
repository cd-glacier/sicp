#lang planet neil/sicp

(define (count-pairs x)
	(define counted '())
	(define (include? target li)
		(cond ((not (pair? li)) #f)
					((eq? target (car li)) #t)
					(else (include? target (cdr li)))))
	(define (iter li)
		(cond ((not (pair? li)) 0)
					((include? li counted) 0)
					(else (+ (begin (set! counted (append counted (list li)))
													(iter (car li)))
									 (begin (set! counted (append counted (list li)))
													(iter (cdr li)))
									 1))))
	(iter x))

(define (loop? li)
	(define count 0)
	(define pair-count (count-pairs li))
	(define (iter l)
		(cond ((> count pair-count) #t)
					((not (pair? l)) 
					 (set! count (+ count 1))
					 (if (null? l) #f))
					(else (iter (car l))
								(iter (cdr l)))))
	(iter li))
	
(define loop-list (list 1 2 3))
(set-cdr! (cdr (cdr loop-list)) loop-list)

(loop? loop-list)
