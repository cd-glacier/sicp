#lang racket

(define (variable? x) (symbol? x))

(define (same-variable? v1 v2)
	(and (variable? v1) (variable? v2) (eq? v1 v2)))

(define (=number? exp num) (and (number? exp) (= exp num)))

(define (have0? list)
	(define (iter li)
		(cond ((= (car li) 0) #t)
					((null? li) #f)
					(else (iter (cdr li)))))
	(iter list))

(define (delete0 list)
	(define (iter li result)
		(cond ((null? li) result)
					((number? (car li)) (iter (cdr li) (append result (list (car li)))))
					((=number? (car li) 0) (iter (cdr li) result))
					(else (iter (cdr li) result))))
	(iter list '()))

(delete0 (list 1 2 2 3 0 9 8 0 9))

(define (make-sum a1 a2)
	(cond ((=number? a1 0) a2)
				((=number? a2 0) a1)
				((and (number? a1) (number? a2))
				 (+ a1 a2))
				(else (list '+ a1 a2))))

#;(define make-sum
	(lambda (a . b)
		(cond ((=number? a 0) (append (list '+) b))
					((have0? b) (append (list '+ a) (delete0 b))
					(else (append (list '+ a) b))))))

(define (sum? x) (and (pair? x) (eq? (car x) '+)))
(define (addend s) (cadr s))
(define (augend s) (caddr s))

(define (make-product m1 m2)
	(cond ((or (=number? m1 0) (=number? m2 0)) 0)
				((=number? m1 1) m2)
				((=number? m2 1) m1)
				((and (number? m1) (number? m2)) (* m1 m2))
				(else (list '* m1 m2))))
(define (product? x) (and (pair? x) (eq? (car x) '*)))
(define (multiplier p) (cadr p))
(define (multiplicand p) (caddr p))

(define (make-exponentiation b e)
	(cond ((=number? e 0) 1)
				((=number? e 1) b)
				((=number? b 0) 0)
				((=number? b 1) 1)
				((and (number? b) (number? e)) (make-exponentiation b (- e 1)))
				(else (list '** b e))))
	
(define (exponentiation? x)
	(and (pair? x) (eq? (car x) '**)))
(define (base x) (cadr x))
(define (exponent x) (caddr x))

(define (deriv exp var)
	(cond ((number? exp) 0)
				((variable? exp) (if (same-variable? exp var) 1 0))
				((sum? exp) (make-sum (deriv (addend exp) var)
															(deriv (augend exp) var)))
				((product? exp)
				 (make-sum
					 (make-product (multiplier exp)
												 (deriv (multiplicand exp) var))
					 (make-product (deriv (multiplier exp) var)
												 (multiplicand exp))))
				((exponentiation? exp)
				 (make-product
					 (exponent exp)
					 (make-exponentiation (base exp) (- (exponent exp) 1))))
				(else (error "unknown expression type: DERIV" exp))))

;(deriv '(* (* x y) (+ x 3)) 'x)

;(make-sum 1 2 3)
