#lang racket
(require "tag.rkt")
(require "get-put.rkt")

(define (install-rational-package)
	(define (numer x) (car x))
	(define (denom x) (cdr x))
	(define (make-rat n d)
		(let ((g (gcd n d)))
			(cons (/ n g) (/ d g))))
	(define (add-rat x y)
		(make-rat (+ (* (numer x) (denom y))
								 (* (numer y) (denom x)))
							(* (denom x) (denom y))))
	(define (sub-rat x y)
		(make-rat (- (* (numer x) (denom y))
								 (* (numer y) (denom x)))
							(* (denom x) (denom y))))
	(define (mul-rat x y)
		(make-rat (* (numer x) (numer y))
							(* (denom x) (denom y))))
	(define (div-rat x y)
		(make-rat (* (numer x) (denom y))
							(* (denom x) (numer y))))
	(define (equ? x y)
		(and (= (numer x) (numer y))
				 (= (denom x) (denom y))))
	(define (=zero? x)
		(= (numer x) 0))
	(define (raise x)
		((get 'make 'real) (/ (numer x)
													(denom x))))
	(define (project x)
		((get 'make 'integer) (/ (numer x)
														 (denom x))))

	(define (tag x) (attach-tag 'rational x))
	(put 'nuber '(rational) numer)
	(put 'denom '(rational) denom)
	(put 'add '(rational rational)
			 (lambda (x y) (tag (add-rat x y))))
	(put 'sub '(rational rational)
			 (lambda (x y) (tag (sub-rat x y))))
	(put 'mul '(rational rational)
			 (lambda (x y) (tag (mul-rat x y))))
	(put 'div '(rational rational)
			 (lambda (x y) (tag (div-rat x y))))
	(put 'make 'rational
			 (lambda (n d) (tag (make-rat n d))))
	(put 'equ? '(rational rational) equ?)
	(put '=zero? '(rational)
			 (lambda (x) (=zero? x)))
	(put 'raise '(rational) raise)
	(put 'project '(rational) project)
	'done)

(provide install-rational-package)
