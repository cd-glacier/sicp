#lang racket
(require "get-put.rkt")
(require "tag.rkt")
(require "integer.rkt")
(require "real.rkt")
(require "rational.rkt")
(require "rectangular.rkt")
(require "polar.rkt")
(require "complex.rkt")
(require "polynomial.rkt")

(install-integer-package)
(install-real-package)
(install-rational-package)
(install-rectangular-package)
(install-polar-package)
(install-complex-package)
(install-polynomial-package)

(define (make-scheme-number n)
	((get 'make 'scheme-number) n))
(define (make-integer i)
	((get 'make 'integer) i))
(define (make-real r)
	((get 'make 'real) r))
(define (make-rational n d)
	((get 'make 'rational) n d))
(define (make-complex-from-real-imag x y)
	((get 'make-from-real-imag 'complex) x y))
(define (make-complex-from-mag-ang r a)
	((get 'make-from-mag-ang 'complex) r a))
(define (make-poly o c)
	((get 'make 'polynomial) o c))

(define (add x y) (apply-generic 'add x y))
(define (sub x y) (apply-generic 'sub x y))
(define (mul x y) (apply-generic 'mul x y))
(define (div x y) (apply-generic 'div x y))
(define (numer r) (apply-generic 'numer r))
(define (denom r) (apply-generic 'denom r))
(define (real-part z) (apply-generic 'real-part z))
(define (imag-part z) (apply-generic 'imag-part z))
(define (equ? x y) (apply-generic 'equ? x y))
(define (=zero? x) (apply-generic '=zero? x))
(define (raise x) (apply-generic 'raise x))
(define (project x) (apply-generic 'project x))
(define (drop x)
	(if (eq? 'integer (type-tag x))
		x
		(let ((p (project x)))
			(if (equ? x (raise p))
				(drop p)
				p))))

(provide make-scheme-number)
(provide make-integer)
(provide make-real)
(provide make-rational)
(provide make-complex-from-real-imag)
(provide make-complex-from-mag-ang)
(provide make-poly)
(provide add)
(provide sub)
(provide mul)
(provide numer)
(provide denom)
(provide real-part)
(provide imag-part)
(provide equ?)
(provide =zero?)
(provide raise)
(provide project)
(provide drop)


