#lang planet neil/sicp

(define (make-queue) (cons '() '()))
(define (front-ptr queue) (car queue))
(define (rear-ptr queue) (cdr queue))
(define (set-front-ptr! queue item)
	(set-car! queue item))
(define (set-rear-ptr! queue item)
	(set-cdr! queue item))
(define (empty-queue? queue)
	(null? (front-ptr queue)))
(define (front-queue queue)
	(if (empty-queue? queue)
		(error "FRONT called with an empty queue" queue)
		(car (front-ptr queue))))
(define (insert-queue! queue item)
	(let ((new-pair (cons item '())))
		(cond ((empty-queue? queue)
					 (set-front-ptr! queue new-pair)
					 (set-rear-ptr! queue new-pair)
					 queue)
					(else 
						(set-cdr! (rear-ptr queue) new-pair)
						(set-rear-ptr! queue new-pair)
						queue))))
(define (delete-queue! queue)
	(cond ((empty-queue? queue)
				 (error "DELETE called with an empty queue" queue))
				(else (set-front-ptr! queue (cdr (front-ptr queue)))
							queue)))
(define (print-queue queue)
	(define (iter queue)
		(cond ((empty-queue? queue) (display ""))
					((eq? (front-ptr queue) (rear-ptr queue))
					 (display (front-queue queue)))
					(else (begin (display (front-queue queue)) 
											 (display " ")
											 (delete-queue! queue)
											 (iter queue)))))
	(display "(")
	(iter queue)
	(display ")")
	(display "\n"))

(define (make-deque) (cons '() '()))
(define (empty-deque? deque)
	(and (null? (front-ptr deque))
			 (null? (rear-ptr deque))))
(define (front-deque deque)
	(if (empty-deque? deque)
		(error "FRONT called with an empty deque" deque)
		(car (front-ptr deque))))
(define (rear-deque deque)
	(if (empty-deque? deque)
		(error "REAR called with an empty deque" deque)
		(car (rear-ptr deque))))
(define (front-insert-deque! deque item)
	(let ((new-pair (cons item '())))
		(cond ((empty-deque? deque)
					 (set-front-ptr! deque new-pair)
					 (set-rear-ptr! deque new-pair)
					 deque)
					(else 
						(set-cdr! new-pair (front-deque deque))
						(set-front-ptr! deque new-pair)
						deque))))
(define (rear-insert-deque! deque item)
	(let ((new-pair (cons item '())))
		(cond ((empty-deque? deque)
					 (set-front-ptr! deque new-pair)
					 (set-rear-ptr! deque new-pair)
					 deque)
					(else 
						(set-cdr! (rear-ptr deque) new-pair)
						(set-rear-ptr! deque new-pair)
						deque))))
(define (front-delete-deque! deque)
	(cond ((empty-deque? deque)
				 (error "DELETE called with an empty deque" deque))
				(else (set-front-ptr! deque (cdr (front-ptr deque)))
							deque)))
;どうしよ
(define (rear-delete-deque! deque)
	(cond ((empty-deque? deque)
				 (error "DELETE called with an empty deque" deque))
				(else (set-rear-ptr! deque (cdr (front-ptr deque)))
							deque)))

(define d1 (make-deque))
(front-insert-deque! d1 'a)
(front-insert-deque! d1 'b)
(rear-insert-deque! d1 'c)
(front-delete-deque! d1)


